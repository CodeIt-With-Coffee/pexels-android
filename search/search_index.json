{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pexels Android Library","text":"<p>Pexels Android Library is a wrapper library for Pexels REST API. It handles all the network transactions and provides the data. It uses the popular Android Network client Retrofit.</p> <p>This project started as a helper utils for my own projects. But then I decided to expand further to make it as a library. There are many community libraries for other frameworks and languages, but a few for Android and JVM languages.</p> <p>It uses Coroutines as its main weapon, but it also has support for Java devs too (by callback).</p> KotlinJava <pre><code>coroutineScope.launch {\n    try {\n        val response = pexelsClient.searchForPhotos(\"duck\")\n    } catch (e: Exception) {\n\n    }\n}\n</code></pre> <pre><code>pexelsClient.searchForPhotosCallback(\"duck\") // (1)\n    .setOnSuccessListener(response -&gt; {\n\n    })\n    .setOnFailureListener(e -&gt; {\n\n    });\n</code></pre> <ol> <li>For every operation involves coroutines, suspend functions, there will be equivalent *Callback methods to support Java callers.</li> </ol>"},{"location":"#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li>Pexels</li> <li>Retrofit</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>List of Curated Photos</li> <li>Search Photos by query string</li> <li>List of Popular Videos</li> <li>Search Videos by query string</li> </ul>"},{"location":"#future","title":"Future","text":"<ul> <li>Paging3 module</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2022, Sanjay S\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this work except in compliance with the License.\nYou may obtain a copy of the License in the LICENSE file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions\nand limitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog - <code>Added</code> for new features. - <code>Changed</code> for changes in existing functionality. - <code>Deprecated</code> for soon-to-be removed features. - <code>Removed</code> for now removed features. - <code>Fixed</code> for any bug fixes. - <code>Security</code> in case of vulnerabilities.</p>"},{"location":"changelog/#104-29102023","title":"[1.0.4] - 29/10/2023","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Setup Paging3 module</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Splitted the library into 2 modules<ul> <li><code>core</code> - Core module with all the API calls</li> <li><code>paging3</code> - Paging3 module</li> </ul> </li> </ul>"},{"location":"changelog/#103-29102023","title":"[1.0.3] - 29/10/2023","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Project java version to 17</li> <li>Updated dependencies to latest version</li> <li>Updated sample app to latest version</li> <li>Moved Gson to Moshi converter</li> <li>targetSdk and compileSdk to 34</li> <li>Kotlin version to 1.9.10</li> <li>Docs updated Build config section</li> </ul>"},{"location":"changelog/#102-23022022","title":"[1.0.2] - 23/02/2022","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Transferred from CodeIt-With-Coffee to SanjayDevTech</li> </ul>"},{"location":"changelog/#101-15022022","title":"[1.0.1] - 15/02/2022","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Mixed parameters in PexelsClient</li> </ul>"},{"location":"changelog/#100-15022022","title":"[1.0.0] - 15/02/2022","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Video Functionality</li> <li>Unit Tests for Retrofit</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Surface API</li> <li>Updated Sample app with video page</li> </ul>"},{"location":"changelog/#001-28012022","title":"[0.0.1] - 28/01/2022","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Initial library publish setup</li> <li>Sample app</li> <li>Photos functionality</li> </ul>"},{"location":"guide/","title":"Architecture","text":""},{"location":"guide/#pexels","title":"Pexels","text":"<p>Pexels object is the main component for Pexels SDK initialisation.</p> <p>It contains one method <code>createClient</code>.</p>"},{"location":"guide/#pexels-client","title":"Pexels Client","text":"<p>Pexels client is the class responsible for requesting network calls to Pexels Server. It accepts a PexelsOperation implementation to work.</p>"},{"location":"getting-started/","title":"Setup","text":""},{"location":"getting-started/#build-status","title":"Build status","text":""},{"location":"getting-started/#setup_1","title":"Setup","text":"build.gradle<pre><code>allprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' } // This url\n    }\n}\n</code></pre> app/build.gradle<pre><code>// Core module\nimplementation 'com.github.SanjayDevTech.pexels-android:core:&lt;version&gt;' //(1)\n\n// Paging3 module (optional)\nimplementation 'com.github.SanjayDevTech.pexels-android:paging3:&lt;version&gt;' //(2)\n</code></pre> <ol> <li>In the place of &lt;version&gt; you can replace any release tag     Eg: 0.0.1</li> <li>In the place of &lt;version&gt; you can replace any release tag     Eg: 0.0.1</li> </ol>"},{"location":"getting-started/#api-key","title":"API Key","text":"<p>Pexels service needs an API Key to work. Get an API key from their official website Pexels</p>"},{"location":"getting-started/#pexels-client","title":"Pexels client","text":"<p>Use <code>Pexels</code> class to get a <code>PexelsClient</code>.</p> KotlinJava <pre><code>val apiKey = \"...\"\nval pexelsClient: PexelsClient = Pexels.createClient(apiKey)\n</code></pre> <pre><code>String apiKey = \"...\";\nPexelsClient pexelsClient = Pexels.createClient(apiKey);\n</code></pre>"},{"location":"getting-started/#jvm-compatibility","title":"JVM compatibility","text":"<p>It uses Java 17 as source and target compile versions. It requires the projects needs to be Java 17.</p> KotlinJava app/build.gradle<pre><code>android {\n    //...\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }\n    kotlinOptions {\n        jvmTarget = '17'\n    }\n}\n</code></pre> app/build.gradle<pre><code>android {\n    //...\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }\n}\n</code></pre>"},{"location":"getting-started/#buildconfig-optional","title":"BuildConfig (Optional)","text":"<p>The API Keys can be extracted from public git repo, if it is used in code directly. I suggest to create secrets file and integrating into your projects.</p>"},{"location":"getting-started/#secrets-file","title":"Secrets file","text":"<p>Create a <code>secrets.properties</code> file in root of the project. Make sure you added the <code>secrets.properties</code> entry in <code>.gitignore</code>, so that it won't get committed to git repository.</p> <p>Paste the api key in <code>secrets.properties</code> file as:</p> <p>secrets.properties<pre><code>PEXELS_API_KEY=\"&lt;apikey&gt;\"\n</code></pre> Note: The api key should be enclosed in double quotes.</p>"},{"location":"getting-started/#extract-key","title":"Extract key","text":"<p>Define the below function <code>getApiKey()</code> in <code>app/build.gradle</code> file.</p> app/build.gradle<pre><code>static def getApiKey(){\n    def props = new Properties()\n    try {\n        props.load(new FileInputStream(new File('secrets.properties')))\n        return props['PEXELS_API_KEY']\n    } catch(ignored) {\n        return \"\\\"\\\"\"\n    }\n}\n</code></pre> <p>And add the API Key in the Build configuration app/build.gradle<pre><code>android {\n    //...\n    buildTypes {\n        debug {\n            // for debug\n            buildConfigField \"String\", \"API_KEY\", getApiKey() // This one is newly added\n        }\n        release {\n            // for release\n            buildConfigField \"String\", \"API_KEY\", getApiKey() // This one is newly added\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n</code></pre></p>"},{"location":"getting-started/#access-from-code","title":"Access from code","text":"<p>Consume the API Key using the <code>BuildConfig</code> class. This class will be generated after every successful gradle build.</p> KotlinJava <pre><code>val apiKey = BuildConfig.API_KEY // (1)\n</code></pre> <ol> <li>This shows error if the project hasn't been build yet.</li> </ol> <pre><code>String apiKey = BuildConfig.API_KEY; // (1)\n</code></pre> <ol> <li>This shows error if the project hasn't been build yet.</li> </ol>"},{"location":"getting-started/#demo-project","title":"Demo project","text":"<p>I have created a demo project to demonstrate multiple ways to consume the Pexels Android Library. The sample app has been created as a <code>sample</code> module in the Pexels Android Library repository itself.</p> <p>Even though the sample is fully integrated, it will not contain any API Keys for the project. Follow the above BuildConfig method to add the API key.</p>"},{"location":"getting-started/core/","title":"Core","text":""},{"location":"getting-started/paging3/","title":"Paging 3","text":""}]}